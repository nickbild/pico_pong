; Visible, 480
; Front porch 10
; Sync pulse, 2 lines
; Back porch, 33
;
; 4000 clocks per line
;
; GPIO 0 = vsync
; GPIO 1 = trigger horizontal draw
;
.program blinky    
.side_set 1 opt
.wrap_target    
    
; Visible Area
    pull block
    mov isr, osr        ; store this persistently
    out x, 32           ; 3,999 - 3 setup clocks
    
    pull block
    out y, 32           ; 479

VisibleArea2:    
    set pins, 2          ; trigger horizontal line
    set pins, 0          ; horizontal line trigger off    
    mov x, isr           ; reset x
VisibleArea1:
    jmp x-- VisibleArea1
    jmp y-- VisibleArea2

; front porch

    pull block side 1
    out x, 32           ; 39,999 - 2 setup clocks

frontPorch1:
    jmp x-- frontPorch1

; vsync
    pull block
    out x, 32           ; vsync clocks: 7,999 - 3 setup clocks
    set pins, 1         ; turn on vsync

vSync:                  ; v sync pulse period
    jmp x-- vSync

    set pins, 0          ; turn off vsync

; back porch

    pull block
    out x, 32           ; 131,999 - 1 setup clock

backPorch1:
    jmp x-- backPorch1 
    
    nop side 0

.wrap




; Visible area	640
; Front porch	16
; Sync pulse	96
; Back porch	48
;
; GPIO 1 = wait for horizontal draw start
; GPIO 2 = pixel value
; GPIO 3 = hsync

.program horizontal
.side_set 1 opt
.wrap_target
    wait 1 pin 1

    ; visible (640)
    pull block
    out x, 32

visible:
    ; pull block
    ; out pins, 32 [2]
    set pins, 2 [3]         ; pixel values
    jmp x-- visible

    set pins, 0             ; pixel off

    ; front porch (16)
    set x, 15
frontPorch:
    jmp x-- frontPorch [4]
 
    ; horizontal sync (96)
    set x, 30 side 1 [4] ; turn on h sync
hSync1:
    jmp x-- hSync1 [4]

    set x, 30 [4]
hSync2:
    jmp x-- hSync2 [4]

    set x, 30 [4]
hSync3:
    jmp x-- hSync3 [4]

    nop side 0 [4] ; turn off h sync

.wrap




; V: (lines)
; Visible, 480
; ** Kick off hsync only here
; Front porch 10
; Sync pulse, 2 lines
; Back porch, 33
; ** Stop hsync only here
;
; H: (pixels)
; Visible area + Front porch	656
; Sync pulse	96
; Back porch	48
;
; GPIO 4 = wait for hsync start
; GPIO 5 = hsync
;
.program hsync
.side_set 1 opt
    pull block
.wrap_target
    wait 1 gpio 4
    mov x, osr          ; 3,279 - 2 setup clocks

; Visible + front porch delay
topDelay:
    jmp x-- topDelay

; hsync (96)
    set y, 2 side 1     ; hsync on
sync2:
    set x, 30 [3]
sync1:
    jmp x-- sync1 [4]
    jmp y-- sync2

; Back porch
    set x, 29 side 0    ; hsync off
backPorch:
    jmp x-- backPorch [7]

.wrap




% c-sdk {
void blink_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_side) {
   pio_gpio_init(pio, pin); // needed if pin is output
   pio_gpio_init(pio, pin+1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true); // set pin to output

   pio_gpio_init(pio, pin_side); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin_side, 1, true); // set pin to output

   pio_sm_config c = blinky_program_get_default_config(offset);
   sm_config_set_sideset_pins(&c, pin_side);
   sm_config_set_set_pins(&c, pin, 2);
   pio_sm_init(pio, sm, offset, &c);
}

void horizontal_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_side) {
   pio_gpio_init(pio, pin+1); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin+1, 1, true); // set pin to output
   
   pio_gpio_init(pio, pin_side); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin_side, 1, true); // set pin to output
   
   pio_sm_config c = horizontal_program_get_default_config(offset);
   sm_config_set_sideset_pins(&c, pin_side);
   sm_config_set_set_pins(&c, pin, 2);
   pio_sm_init(pio, sm, offset, &c);
}

void hsync_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_side) {   
   pio_gpio_init(pio, pin_side); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin_side, 1, true); // set pin to output
   
   pio_sm_config c = hsync_program_get_default_config(offset);
   sm_config_set_sideset_pins(&c, pin_side);
   sm_config_set_set_pins(&c, pin, 1);
   pio_sm_init(pio, sm, offset, &c);
}

void trigger_pio_interrupt_init(PIO pio, uint sm, uint offset) {
   pio_sm_config c = blinky_program_get_default_config(offset);
   pio_sm_init(pio, sm, offset, &c);
}

%}
