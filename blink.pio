; Visible, 480
; Front porch 10
; Sync pulse, 2 lines
; Back porch, 33
;
; 8000 clocks per line
;
; GPIO 0 = vsync
; GPIO 1 = trigger horizontal draw
;
.program blinky    
.side_set 2 opt
    pull block
    mov isr, osr    ; store this persistently, 7,999 - 3 setup clocks
.wrap_target    
    
; Visible Area
    pull block
    out y, 32           ; 479

VisibleArea2:    
    set pins, 2          ; trigger horizontal line
    set pins, 1          ; horizontal line trigger off    
    mov x, isr           ; reset x
VisibleArea1:
    jmp x-- VisibleArea1
    jmp y-- VisibleArea2

; back porch

    nop [3]
    nop [3]
    nop

    pull block side 2   ; turn on INITIAL hsync only
    out x, 32           ; 131,999 - 1 setup clock

initialHsync:
    jmp x-- initialHsync side 0

    pull block side 1   ; turn on hsync only
    out x, 32           ; 131,999 - 1 setup clock

backPorch1:
    jmp x-- backPorch1 

; vsync
    pull block
    out x, 32           ; vsync clocks: 7,999 - 3 setup clocks
    set pins, 0         ; turn on vsync

vSync:                  ; v sync pulse period
    jmp x-- vSync

    set pins, 1          ; turn off vsync

; front porch

    pull block 
    out x, 32           ; 39,999 - 2 setup clocks

frontPorch1:
    jmp x-- frontPorch1
    
    nop side 0 [3]      ; turn off hsync only

.wrap




; Visible area	640
; Front porch	16
; Sync pulse	96
; Back porch	48
;
; GPIO 1 = wait for horizontal draw start
; GPIO 2 = pixel value
; GPIO 3 = hsync

.program horizontal
.side_set 1 opt
pull block                    ; 639
mov isr, osr
.wrap_target
    wait 1 pin 1

    ; visible (640)
    mov y, isr

visible:
    pull noblock              ; Uses x if data not ready.
    mov x, osr
    jmp !x setZero
    set pins, 2
    jmp y-- visible [5]
    jmp visibleDone
setZero:
    set pins, 0
    jmp y-- visible [5]
visibleDone:

    set pins, 0 [3]

    ; front porch (16)
    set x, 29 [7]
frontPorch:
    jmp x-- frontPorch [4]
 
    ; horizontal sync (96)
    ; 1536
    set y, 27 side 0 [7] ; turn on h sync
  
hSync2:  
    set x, 31
hSync1:
    jmp x-- hSync1
    jmp y-- hSync2
    
    nop side 1 ; turn off h sync

.wrap




; V: (lines)
; Visible, 480
; ** Kick off hsync only here
; Front porch 10
; Sync pulse, 2 lines
; Back porch, 33
; ** Stop hsync only here
;
; H: (pixels)
; Visible area + Front porch	656
; Sync pulse	96
; Back porch	48
;
; GPIO 3 = hsync
; GPIO 4 = wait for hsync start
;
; static uint32_t src[] = {479, 7750, 70090, 15992, 262145};
;
.program hsync
.side_set 1 opt
    pull block
.wrap_target
    wait 1 pin 0
    mov x, osr [3]        ; 3,279 - 2 setup clocks

; Visible + front porch delay
topDelay:
    jmp x-- topDelay

; hsync (96)
    set y, 27 side 0 [7] ; hsync on
sync2:
    set x, 31
sync1:
    jmp x-- sync1
    jmp y-- sync2

; Back porch
    set x, 27 side 1     ; hsync off
backPorch:
    jmp x-- backPorch [7]

.wrap




% c-sdk {
void blink_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_side) {
   pio_gpio_init(pio, pin); // needed if pin is output
   pio_gpio_init(pio, pin+1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true); // set pin to output

   pio_gpio_init(pio, pin_side); // needed if pin is output
   pio_gpio_init(pio, pin_side+1); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin_side, 2, true); // set pin to output

   pio_sm_config c = blinky_program_get_default_config(offset);
   sm_config_set_sideset_pins(&c, pin_side);
   sm_config_set_set_pins(&c, pin, 2);
   pio_sm_init(pio, sm, offset, &c);
}

void horizontal_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_side) {
   pio_gpio_init(pio, pin+1); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin+1, 1, true); // set pin to output
   
   pio_gpio_init(pio, pin_side); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin_side, 1, true); // set pin to output
   
   pio_sm_config c = horizontal_program_get_default_config(offset);
   sm_config_set_sideset_pins(&c, pin_side);
   sm_config_set_set_pins(&c, pin, 2); 
   pio_sm_init(pio, sm, offset, &c);
}

void hsync_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_side) {   
   pio_gpio_init(pio, pin_side); // needed if pin is output
   pio_sm_set_consecutive_pindirs(pio, sm, pin_side, 1, true); // set pin to output
   
   pio_sm_config c = hsync_program_get_default_config(offset);
   sm_config_set_sideset_pins(&c, pin_side);
   sm_config_set_in_pins(&c, pin);
   pio_sm_init(pio, sm, offset, &c);
}

void trigger_pio_interrupt_init(PIO pio, uint sm, uint offset) {
   pio_sm_config c = blinky_program_get_default_config(offset);
   pio_sm_init(pio, sm, offset, &c);
}

%}
